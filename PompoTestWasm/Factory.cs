/// <summary>
/// The factory for creating objects transmitted to the JS runtime.
/// Generated by Pompo 14.03.2025 16:36:38.
/// </summary>

using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;

namespace WasmModule
{
    public class Factory(IJSObjectReference jsTransmitModule, IServiceProvider serviceProvider)
    {
        private readonly IJSObjectReference _jsTransmitModule = jsTransmitModule;
        private readonly IServiceProvider _serviceProvider = serviceProvider;

        private async Task TransmitObject<T>(DotNetObjectReference<T> obj)
            where T: class =>
            await _jsTransmitModule.InvokeVoidAsync("transmit", obj);

        public void InjectServices(object obj)
        {
            var props = obj.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.SetProperty | System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance)
                .Where(p => p.GetCustomAttributes(typeof(InjectAttribute), true).Length > 0);

            foreach (var p in props)
            {
                var method = p.GetGetMethod();
                if (method == null)
                    continue;

                var s = _serviceProvider.GetService(method.ReturnType)
                    ?? throw new ApplicationException($"Unable resolve service {method.ReturnType.FullName} for property {obj.GetType().FullName}.{p.Name}");
                p.SetValue(obj, s);
            }
        }

        [JSInvokable]
        public async Task Create_demo(string id)
        {
            var rawObj = new WasmModule.DemoService(id);
            InjectServices(rawObj);
            var obj = DotNetObjectReference.Create(rawObj);            
            await TransmitObject(obj);
        }
    }
}