using Pompo.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pompo.Extensions;

namespace Pompo
{
    public partial class CodeGenerator
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="classes"></param>
        /// <returns></returns>
        private string GenerateFactorySourceCode (List<ClassDescription> classes) => $@"/// <summary>
/// The factory for creating objects transmitted to the JS runtime.
/// Generated by Pompo {DateTime.Now}.
/// </summary>

using Microsoft.JSInterop;

{( string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : $"namespace {_props["build_property.RootNamespace"]}" )}
{( string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : "{" )}
    public class Factory(IJSObjectReference jsTransmitModule)
    {{
        private readonly IJSObjectReference _jsTransmitModule = jsTransmitModule;

        private async Task TransmitObject<T>(DotNetObjectReference<T> obj)
            where T: class =>
            await _jsTransmitModule.InvokeVoidAsync(""transmit"", obj);
{ GenerateCreateMethodsForFactory(classes) }
    }}
{( string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : "}" )}";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="classes"></param>
        /// <returns></returns>
        private string GenerateCreateMethodsForFactory(List<ClassDescription> classes) => string.Join(
            "\n",
            classes.SelectMany(c => c.Ctors.Select(ctor => $@"
        [JSInvokable]
        public async Task Create_{(string.IsNullOrWhiteSpace(ctor.Alias) ? c.TransmitName : ctor.Alias)}({ctor.Parameters}) => await TransmitObject(DotNetObjectReference.Create(new {c.FullName}({ctor.Parameters?.ToJsLikeParameterListString()})));")));

        /// <summary>
        /// 
        /// </summary>
        /// <param name="classes"></param>
        /// <returns></returns>
        private string GenerateTransmitterSourceCode(List<ClassDescription> classes) => $@"//////////////////////////////////////////
// The factory for transmit .NET objects.
// Generated by Pompo {DateTime.Now}.
//////////////////////////////////////////
/*
window.transmitFunc = (obj) => {{
    window.dotNetObjectFactory = obj;
    { GenerateCreateMethodsForTransmitter(classes) }
}};

export function transmit(obj) {{
    if (window.transmitFunc) {{
        window.transmitFunc(obj);
    }}
}};
*/";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="classes"></param>
        /// <returns></returns>
        private string GenerateCreateMethodsForTransmitter(List<ClassDescription> classes) => string.Join(
            "\n",
            classes.SelectMany(c => c.Ctors.Select(ctor => $@"
    window.dotNetObjectFactory.create_{ctor.TransmitName} = async ({ctor.Parameters?.ToJsLikeParameterListString()}) => {{
        let o = null;
        window.transmitFunc = (obj) => o = obj;
        await window.dotNetObjectFactory.invokeMethodAsync(
            'Create_{ctor.TransmitName}'{(string.IsNullOrWhiteSpace(ctor.Parameters?.ToJsLikeParameterListString()) ? string.Empty : $@",
            {ctor.Parameters?.ToJsLikeParameterListString()}")}
        );
{ GenerateMethodInvokes(c) }

        delete window.transmitFunc;
        return o;
    }};"))
        );

        /// <summary>
        /// 
        /// </summary>
        /// <param name="c"></param>
        /// <returns></returns>
        private string GenerateMethodInvokes(ClassDescription c) => string.Join(
            "\n", c.Methods.Select(m => $@"
        o.{m.TransmitName} = async ({m.Parameters?.ToJsLikeParameterListString()}) => await foo.invokeMethodAsync(
            '{m.Name}'{(string.IsNullOrWhiteSpace(m.Parameters?.ToJsLikeParameterListString()) ? string.Empty : $@",
            {m.Parameters?.ToJsLikeParameterListString()}")}
        );"));

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private string GenerateWebAssemblyHostExtensionCode() => $@"/// <summary>
/// The extension method for WebAssemblyHost.
/// Generated by Pompo {DateTime.Now}.
/// </summary>

using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using Microsoft.JSInterop;

{(string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : $"namespace {_props["build_property.RootNamespace"]}")}
{(string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : "{")}
    public static class WebAssemblyHostExtension
    {{
        public static async Task UsePompo(this WebAssemblyHost host)
        {{
            var jsRuntime = host.Services.GetRequiredService<IJSRuntime>();
            var jsTransmitModule = await jsRuntime.InvokeAsync<IJSObjectReference>(""import"", ""./{_props["build_property.PompoJsWrapperOutputFile"]}"");
            var factory = DotNetObjectReference.Create(new Factory(jsTransmitModule));
            await jsTransmitModule.InvokeVoidAsync(""transmit"", factory);
        }}
    }}
{(string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : "}")}";
    }
}