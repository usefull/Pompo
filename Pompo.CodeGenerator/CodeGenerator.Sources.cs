using Pompo.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Pompo.Extensions;

namespace Pompo
{
    public partial class CodeGenerator
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="classes"></param>
        /// <returns></returns>
        private string GenerateFactorySourceCode (List<ClassDescription> classes) => $@"/// <summary>
/// The factory for creating objects transmitted to the JS runtime.
/// Generated by Pompo {DateTime.Now}.
/// </summary>

using Microsoft.JSInterop;

{( string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : $"namespace {_props["build_property.RootNamespace"]}" )}
{( string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : "{" )}
    public class Factory(IJSObjectReference jsTransmitModule)
    {{
        private readonly IJSObjectReference _jsTransmitModule = jsTransmitModule;

        private async Task TransmitObject<T>(DotNetObjectReference<T> obj)
            where T: class =>
            await _jsTransmitModule.InvokeVoidAsync(""transmit"", obj);
{ GenerateCreateMethodsForFactory(classes) }
    }}
{( string.IsNullOrWhiteSpace(_props["build_property.RootNamespace"]) ? string.Empty : "}" )}";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="classes"></param>
        /// <returns></returns>
        private string GenerateCreateMethodsForFactory(List<ClassDescription> classes) => string.Join(
            "\n",
            classes.SelectMany(c => c.Ctors.Count > 0
            ? c.Ctors.Select(ctor => $@"
        [JSInvokable]
        public async Task Create_{(string.IsNullOrWhiteSpace(ctor.Alias) ? c.TransmitName : ctor.Alias)}({ctor.Parameters}) => await TransmitObject(DotNetObjectReference.Create(new {c.FullName}({ctor.Parameters?.ToJsLikeParameterListString()})));")
            : new [] { $@"
        [JSInvokable]
        public async Task Create_{(string.IsNullOrWhiteSpace(c.Alias) ? c.TransmitName : c.Alias)}() => await TransmitObject(DotNetObjectReference.Create(new {c.FullName}()));" })
        );

        /// <summary>
        /// 
        /// </summary>
        /// <param name="classes"></param>
        /// <returns></returns>
        private string GenerateTransmitterSourceCode(List<ClassDescription> classes) => $@"//////////////////////////////////////////
// The factory for transmit .NET objects.
// Generated by Pompo {DateTime.Now}.
//////////////////////////////////////////

window.transmitFunc = (obj) => {{
    window.dotNetObjectFactory = obj;
    { GenerateCreateMethodsForTransmitter(classes) }
}};

export function transmit(obj) {{
    if (window.transmitFunc) {{
        window.transmitFunc(obj);
    }}
}};";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="classes"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        private string GenerateCreateMethodsForTransmitter(List<ClassDescription> classes) => "";
    }
}