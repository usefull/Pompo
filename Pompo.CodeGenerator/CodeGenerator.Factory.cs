using Pompo.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using Pompo.Extensions;

namespace Pompo
{
    /// <summary>
    /// Generates source code for Factory for an explicit object creation.
    /// </summary>
    public partial class CodeGenerator
    {
        /// <summary>
        /// Generates factory source code.
        /// </summary>
        /// <param name="classes">Collection of class declaration.</param>
        /// <returns>Factory source code.</returns>
        private string GenerateFactorySourceCode(List<ClassDescription> classes) => $@"/// <summary>
/// The factory for creating objects transmitted to the JS runtime.
/// Generated by Pompo {DateTime.Now}.
/// </summary>

using Microsoft.JSInterop;

namespace Pompo
{{
    public partial class Factory
    {{
{GenerateCreateMethodsForFactory(classes)}
    }}
}}";

        /// <summary>
        /// Generate object creation methods source code.
        /// </summary>
        /// <param name="classes">Collection of class declaration.</param>
        /// <returns>Source code.</returns>
        private string GenerateCreateMethodsForFactory(List<ClassDescription> classes) => string.Join(
            "\n",
            classes.SelectMany(c => c.Ctors.Select(ctor => $@"
        [JSInvokable]
        public async Task Create_{ctor.TransmitName}({ctor.Parameters?.ToParameterListStringWithFullTypenames(_types)})
        {{
            var obj = new {c.FullName}({ctor.Parameters?.ToJsLikeParameterListString()});          
            await TransmitObject(obj);
        }}")));
    }
}