using System;

namespace Pompo
{
    /// <summary>
    /// Generates constant source code for Factory class
    /// </summary>
    public partial class CodeGenerator
    {

        /// <summary>
        /// Generates factory source code.
        /// </summary>
        /// <param name="classes">Collection of class declaration.</param>
        /// <returns>Factory source code.</returns>
        private string GenerateConstantFactorySourceCode() => $@"/// <summary>
/// The factory for creating objects transmitted to the JS runtime.
/// Generated by Pompo {DateTime.Now}.
/// </summary>

using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;
using System.Reflection;

namespace Pompo
{{
    public partial class Factory
    {{
        private readonly IJSObjectReference _jsTransmitModule;
        private readonly IServiceProvider _serviceProvider;
        private readonly Dictionary<string, Type> _aliasedTypes;

        public Factory(IJSObjectReference jsTransmitModule, IServiceProvider serviceProvider)
        {{
            _jsTransmitModule = jsTransmitModule;
            _serviceProvider = serviceProvider;

            _aliasedTypes = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes())
                .Select(t => new {{ Type = t, Alias = t.GetCustomAttribute<PompoAliasAttribute>()?.Pseudonym ?? string.Empty }})
                .Where(t => !string.IsNullOrWhiteSpace(t.Alias))
                .ToDictionary(t => t.Alias, t => t.Type);
        }}

        private async Task TransmitObject<T>(T obj, string? script = null)
            where T : class
        {{
            InjectServices(obj);
            var objRef = DotNetObjectReference.Create(obj);
            await _jsTransmitModule.InvokeVoidAsync(""transmit"", objRef, script);
        }}

        public void InjectServices(object obj)
        {{
            var props = obj.GetType()
                .GetProperties(BindingFlags.Public | BindingFlags.SetProperty | BindingFlags.GetProperty | BindingFlags.Instance)
                .Select(p => new {{ Info = p, Attr = p.GetCustomAttributes<InjectAttribute>().FirstOrDefault() }})
                .Where(i => i.Attr != null);

            foreach (var p in props)
            {{
                var method = p.Info.GetGetMethod();
                if (method == null)
                    continue;

                object service;
                try
                {{
                    service = p.Attr!.Key == null
                        ? _serviceProvider.GetRequiredService(method.ReturnType)
                        : _serviceProvider.GetRequiredKeyedService(method.ReturnType, p.Attr!.Key);
                }}
                catch (Exception ex)
                {{
                    throw new ApplicationException($""Unable inject DI service {{method.ReturnType.FullName}} into property {{obj.GetType().FullName}}.{{p.Info.Name}}."", ex);
                }}
                p.Info.SetValue(obj, service);
            }}
        }}

        [JSInvokable]
        public async Task ResolveDI(string type)
        {{
            if (!_aliasedTypes.TryGetValue(type, out var typeToResolve))
            {{
                typeToResolve = Type.GetType(type);
                if (typeToResolve == null)
                    throw new ApplicationException($""Unknown type name '{{type}}' to resolve."");
            }}

            object service;
            try
            {{
                service = _serviceProvider.GetRequiredService(typeToResolve);                    
            }}
            catch (Exception ex)
            {{
                throw new ApplicationException($""Unable resolve DI service by type name / alias: '{{type}}."", ex);
            }}

            var scriptLines = typeToResolve.GetMethods(BindingFlags.Public | BindingFlags.Instance)
                .SelectMany(m => m.GetCustomAttributes<JSInvokableAttribute>().Select(a => new {{ Method = m, Attr = a }}))
                .Select(m =>
                {{
                    var paramList = string.Join("", "", m.Method.GetParameters().Select(p => p.Name));
                    return $""obj.{{(string.IsNullOrWhiteSpace(m.Attr.Identifier) ? m.Method.Name : m.Attr.Identifier)}} = async ({{paramList}}) => await obj.invokeMethodAsync('{{(string.IsNullOrWhiteSpace(m.Attr.Identifier) ? m.Method.Name : m.Attr.Identifier)}}'{{(string.IsNullOrWhiteSpace(paramList) ? string.Empty : $"", {{paramList}}"")}});"";
                }});

            var script = $""{{string.Join('\n', scriptLines)}}\nreturn obj;"";

            await TransmitObject(service, script);
        }}
    }}
}}";
    }
}