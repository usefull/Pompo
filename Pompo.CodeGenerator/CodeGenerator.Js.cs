using Pompo.Entities;
using Pompo.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Pompo
{
    /// <summary>
    /// Generates JS code.
    /// </summary>
    public partial class CodeGenerator
    {
        /// <summary>
        /// Generates JS transmitter source code.
        /// </summary>
        /// <param name="classes">Collection of class declaration.</param>
        /// <returns>Source code.</returns>
        private string GenerateTransmitterSourceCode(List<ClassDescription> classes) => $@"//////////////////////////////////////////
// The factory for transmit .NET objects.
// Generated by Pompo {DateTime.Now}.
//////////////////////////////////////////
/*
window.transmitFunc = (obj) => {{
    window.dotNetObjectFactory = obj;
    {GenerateCreateMethodsForTransmitter(classes)}
    window.dotNetObjectFactory.resolve_di = async (type) => {{
        let o = null;
        window.transmitFunc = (obj, script) => {{
            let fn = Function(""obj"", script);
            o = fn(obj);
        }};
        await window.dotNetObjectFactory.invokeMethodAsync(
            'ResolveDI',
            type
        );
        delete window.transmitFunc;
        return o;
    }};

    delete window.transmitFunc;

    console.log('Pompo factory initialized.');
}};

export function transmit(obj, script) {{
    if (window.transmitFunc) {{
        window.transmitFunc(obj, script);
    }}
}};
*/";

        /// <summary>
        /// Generates objects creation methods source code for JS transmitter.
        /// </summary>
        /// <param name="classes">Collection of class declaration.</param>
        /// <returns>Source code.</returns>
        private string GenerateCreateMethodsForTransmitter(List<ClassDescription> classes) => string.Join(
            "\n",
            classes.SelectMany(c => c.Ctors.Select(ctor => $@"
    window.dotNetObjectFactory.create_{ctor.TransmitName} = async ({ctor.Parameters?.ToJsLikeParameterListString()}) => {{
        let o = null;
        window.transmitFunc = (obj) => o = obj;
        await window.dotNetObjectFactory.invokeMethodAsync(
            'Create_{ctor.TransmitName}'{(string.IsNullOrWhiteSpace(ctor.Parameters?.ToJsLikeParameterListString()) ? string.Empty : $@",
            {ctor.Parameters?.ToJsLikeParameterListString()}")}
        );
{GenerateMethodInvokes(c)}

        delete window.transmitFunc;
        return o;
    }};"))
        );

        /// <summary>
        /// Generates invoking methods source code for JS transmitter.
        /// </summary>
        /// <param name="cls">Class declaration.</param>
        /// <returns></returns>
        private string GenerateMethodInvokes(ClassDescription cls) => string.Join(
            "\n", cls.Methods.Select(m => $@"
        o.{m.TransmitName} = async ({m.Parameters?.ToJsLikeParameterListString()}) => await o.invokeMethodAsync(
            '{m.Name}'{(string.IsNullOrWhiteSpace(m.Parameters?.ToJsLikeParameterListString()) ? string.Empty : $@",
            {m.Parameters?.ToJsLikeParameterListString()}")}
        );"));
    }
}